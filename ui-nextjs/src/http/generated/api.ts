/**
 * Generated by orval v7.3.0 游꽄
 * Do not edit manually.
 * API
 * API documentation
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type AuthControllerRefreshToken200 = {
  accessToken?: string;
  message?: string;
};

export type AuthControllerVerifyRegister200 = {
  accessToken?: string;
  message?: string;
  refreshToken?: string;
};

export type AuthControllerVerifyLogin200 = {
  accessToken?: string;
  message?: string;
  refreshToken?: string;
};

export type AuthControllerRegister201 = {
  message?: string;
  registerToken?: string;
  verifyRegisterUrl?: string;
};

export type AuthControllerLogin201 = {
  loginToken?: string;
  message?: string;
  verifyLoginUrl?: string;
};

export type UsersControllerRemoveById200User = {
  createdAt?: string;
  email?: string;
  fisrtName?: string;
  id?: number;
  imageUrl?: string;
  lastName?: string;
  role?: string;
  updatedAt?: string;
  verified?: boolean;
  whatsappNumber?: string;
};

export type UsersControllerRemoveById200 = {
  message?: string;
  user?: UsersControllerRemoveById200User;
};

export type UsersControllerUpdateById200UpdatedFields = { [key: string]: unknown };

export type UsersControllerUpdateById200 = {
  message?: string;
  updatedFields?: UsersControllerUpdateById200UpdatedFields;
};

export type UsersControllerFindById200 = {
  createdAt?: string;
  email?: string;
  firstName?: string;
  id?: number;
  imageUrl?: string;
  lastName?: string;
  role?: string;
  updatedAt?: string;
  verified?: boolean;
  /** @nullable */
  whatsappNumber?: string | null;
};

export type UsersControllerFindAll200Item = {
  createdAt?: string;
  email?: string;
  firstName?: string;
  id?: number;
  imageUrl?: string;
  lastName?: string;
  role?: string;
  updatedAt?: string;
  verified?: boolean;
  whatsappNumber?: string;
};

export type UsersControllerRemove200User = {
  createdAt?: string;
  email?: string;
  fisrtName?: string;
  id?: number;
  imageUrl?: string;
  lastName?: string;
  role?: string;
  updatedAt?: string;
  verified?: boolean;
  whatsappNumber?: string;
};

export type UsersControllerRemove200 = {
  message?: string;
  user?: UsersControllerRemove200User;
};

export type UsersControllerUpdate200UpdatedFields = { [key: string]: unknown };

export type UsersControllerUpdate200 = {
  message?: string;
  updatedFields?: UsersControllerUpdate200UpdatedFields;
};

export type UsersControllerFindOne200 = {
  createdAt?: string;
  email?: string;
  firstName?: string;
  id?: number;
  lastName?: string;
  role?: string;
  updatedAt?: string;
  verified?: boolean;
  whatsappNumber?: string;
};

export interface CreateUserDto {
  /** Email do usu치rio */
  email: string;
  /** Primeiro nome do usu치rio */
  firstName: string;
  /** Sobrenome do usu치rio */
  lastName: string;
  /** N칰mero do WhatsApp */
  whatsappNumber?: string;
}

export interface LoginDto {
  /** Email do usu치rio */
  email: string;
}

export interface UpdateUserDto {
  /** Email do usu치rio */
  email: string;
  /** Primeiro nome do usu치rio */
  firstName: string;
  /** Sobrenome do usu치rio */
  lastName: string;
  /** N칰mero do WhatsApp */
  whatsappNumber?: string;
}





  export const appControllerServerIsRuning = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/`,options
    );
  }

/**
 * @summary Obter detalhes do usu치rio atual
 */
export const usersControllerFindOne = <TData = AxiosResponse<UsersControllerFindOne200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user/details`,options
    );
  }

/**
 * @summary Atualizar usu치rio atual
 */
export const usersControllerUpdate = <TData = AxiosResponse<UsersControllerUpdate200>>(
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/user/update`,
      updateUserDto,options
    );
  }

/**
 * @summary Deletar usu치rio atual
 */
export const usersControllerRemove = <TData = AxiosResponse<UsersControllerRemove200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/user/delete`,options
    );
  }

/**
 * @summary Listar todos usu치rios (Admin)
 */
export const usersControllerFindAll = <TData = AxiosResponse<UsersControllerFindAll200Item[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user/users`,options
    );
  }

/**
 * @summary Buscar usu치rio por ID (Admin)
 */
export const usersControllerFindById = <TData = AxiosResponse<UsersControllerFindById200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user/${id}`,options
    );
  }

/**
 * @summary Atualizar usu치rio por ID (Admin)
 */
export const usersControllerUpdateById = <TData = AxiosResponse<UsersControllerUpdateById200>>(
    id: string,
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/user/${id}`,
      updateUserDto,options
    );
  }

/**
 * @summary Deletar usu치rio por ID (Admin)
 */
export const usersControllerRemoveById = <TData = AxiosResponse<UsersControllerRemoveById200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/user/${id}`,options
    );
  }

/**
 * @summary Enviar magic link para login
 */
export const authControllerLogin = <TData = AxiosResponse<AuthControllerLogin201>>(
    loginDto: LoginDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/login`,
      loginDto,options
    );
  }

/**
 * @summary Criar novo usu치rio
 */
export const authControllerRegister = <TData = AxiosResponse<AuthControllerRegister201>>(
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/register`,
      createUserDto,options
    );
  }

/**
 * @summary Verificar magic link
 */
export const authControllerVerifyLogin = <TData = AxiosResponse<AuthControllerVerifyLogin200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/verify-login`,options
    );
  }

/**
 * @summary Verificar registro de usu치rio
 */
export const authControllerVerifyRegister = <TData = AxiosResponse<AuthControllerVerifyRegister200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/verify-register`,options
    );
  }

/**
 * @summary Iniciar autentica칞칚o com Google
 */
export const authControllerGoogleAuth = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/google`,options
    );
  }

/**
 * @summary Callback da autentica칞칚o Google
 */
export const authControllerGoogleAuthCallback = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/google/callback`,options
    );
  }

/**
 * @summary Renovar token de acesso
 */
export const authControllerRefreshToken = <TData = AxiosResponse<AuthControllerRefreshToken200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/refresh-token`,options
    );
  }

export type AppControllerServerIsRuningResult = AxiosResponse<void>
export type UsersControllerFindOneResult = AxiosResponse<UsersControllerFindOne200>
export type UsersControllerUpdateResult = AxiosResponse<UsersControllerUpdate200>
export type UsersControllerRemoveResult = AxiosResponse<UsersControllerRemove200>
export type UsersControllerFindAllResult = AxiosResponse<UsersControllerFindAll200Item[]>
export type UsersControllerFindByIdResult = AxiosResponse<UsersControllerFindById200>
export type UsersControllerUpdateByIdResult = AxiosResponse<UsersControllerUpdateById200>
export type UsersControllerRemoveByIdResult = AxiosResponse<UsersControllerRemoveById200>
export type AuthControllerLoginResult = AxiosResponse<AuthControllerLogin201>
export type AuthControllerRegisterResult = AxiosResponse<AuthControllerRegister201>
export type AuthControllerVerifyLoginResult = AxiosResponse<AuthControllerVerifyLogin200>
export type AuthControllerVerifyRegisterResult = AxiosResponse<AuthControllerVerifyRegister200>
export type AuthControllerGoogleAuthResult = AxiosResponse<unknown>
export type AuthControllerGoogleAuthCallbackResult = AxiosResponse<unknown>
export type AuthControllerRefreshTokenResult = AxiosResponse<AuthControllerRefreshToken200>
