/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * API
 * API documentation
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

/**
 * @summary Verifica status do servidor
 */
export type serverStatusResponse = {
  data: string;
  status: number;
  headers: Headers;
};

export const getServerStatusUrl = () => {
  return `http://localhost:3003/`;
};

export const serverStatus = async (
  options?: RequestInit
): Promise<serverStatusResponse> => {
  const res = await fetch(getServerStatusUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data, headers: res.headers };
};

export const getServerStatusQueryKey = () => {
  return [`http://localhost:3003/`] as const;
};

export const getServerStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof serverStatus>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof serverStatus>>, TError, TData>
  >;
  fetch?: RequestInit;
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getServerStatusQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof serverStatus>>> = ({
    signal,
  }) => serverStatus({ signal, ...fetchOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof serverStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> };
};

export type ServerStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof serverStatus>>
>;
export type ServerStatusQueryError = unknown;

export function useServerStatus<
  TData = Awaited<ReturnType<typeof serverStatus>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof serverStatus>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof serverStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData>;
};
export function useServerStatus<
  TData = Awaited<ReturnType<typeof serverStatus>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof serverStatus>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof serverStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
export function useServerStatus<
  TData = Awaited<ReturnType<typeof serverStatus>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof serverStatus>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };
/**
 * @summary Verifica status do servidor
 */

export function useServerStatus<
  TData = Awaited<ReturnType<typeof serverStatus>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof serverStatus>>, TError, TData>
  >;
  fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getServerStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
